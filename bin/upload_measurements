#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.expand_path('..', File.dirname(File.realpath(__FILE__))))

require 'rubygems'
require 'bundler/setup'

require 'active_support/all'
require 'clamp'
require 'faraday'
require 'faraday_middleware'
require 'json'
require 'pp'

require 'lib/time_range'
require 'lib/air_monitor'
require 'lib/remote_source'

Time.zone = 'CET'

Clamp do

  SUPPORTED_SUBJECT_CODES = %w{NO2 NO NOx CO PM10 PM2.5}

  option(['-f', '--from'], :from, 'Left bound of measurement time', default: Time.current) { |f| Time.zone.parse(f) }
  option(['-t', '--to'], :to, 'Right bound of measurement time', default: Time.current) { |t| Time.zone.parse(t) }

  def execute
    time_range.split_by_calendar_days.each { |d|
      upload_measurements_in(d)
    }
  end

  private

  def upload_measurements_in(time_range)
    AirMonitor::Stations.supported.each do |station|

      response = RemoteSource::Measurements.request(station_id: station.id, date: time_range.begin)

      unless response.success?
        puts "Failed to request measurements at #{time} from station with code #{station.code}" and next
      end

      extract(response.body).each { |mp|
        mp[:station_code] = station.code
      }.map { |mp|
        transform(mp)
      }.select { |m|
        time_range.cover?(m.time)
      }.lazy.map { |m|
        load(m)
      }.each { |r|
        log(r)
      }

    end
  end

  def extract(daily_measurements)

    measurements_list = daily_measurements
        .try(:fetch, 'data')
        .try(:fetch, 'series')

    return {} if measurements_list.nil?

    SUPPORTED_SUBJECT_CODES.map { |sc|

      measurements_list
          .detect { |m| m['paramId'].eql?(sc.downcase) }
          .try(:fetch, 'data')
          .try(:map) { |m| { value: m[1],
                             time: m[0],
                             subject_code: sc } }

    }.flatten

  end

  def transform(params)
    AirMonitor::Measurement.new(value: params[:value].to_f,
                    time: Time.zone.at(params[:time].to_i),
                    source: 'http://monitoring.krakow.pios.gov.pl',
                    subject_code: params[:subject_code],
                    station_code: params[:station_code])
  end

  def load(measurement)

    response = AirMonitor::Measurements.post(measurement)

    {
        measurement: measurement,
        response: response
    }

  end

  def log(result)

    measurement, response= result[:measurement], result[:response]

    puts [
        measurement.time,
        measurement.station_code,
        measurement.subject_code,
        response.status,
        response.success? ? '' : response.body
    ].join(';')

  end

  def time_range
    @time_range ||= TimeRange.new(starts, ends)
  end

  def starts
    from.beginning_of_hour
  end

  def ends
    to.end_of_hour
  end

end


